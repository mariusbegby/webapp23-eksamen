generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Athlete {
  id         Int               @id @default(autoincrement())
  userId     String            @unique
  gender     String
  sport      String
  metaId     Int               @unique
  meta       Meta              @relation(fields: [metaId], references: [id])
  contests   TrainingContest[]
  goals      TrainingGoal[]
  activities Activity[]
  reports    ActivityReport[]
}

model Activity {
  id              Int              @id @default(autoincrement())
  date            DateTime
  name            String
  tags            String
  sport           String
  athleteId       Int
  Athlete         Athlete          @relation(fields: [athleteId], references: [id])
  contestId       Int?
  TrainingContest TrainingContest? @relation(fields: [contestId], references: [id])
  goalId          Int?
  TrainingGoal    TrainingGoal?    @relation(fields: [goalId], references: [id])
  intervals       Interval[]
  questions       Question[]
  metricOptions   MetricOptions    @relation(fields: [metricOptionsId], references: [id])
  metricOptionsId String
  reportId        Int?
  ActivityReport  ActivityReport?  @relation(fields: [reportId], references: [id])
}

model ActivityReport {
  id              Int              @id @default(autoincrement())
  date            DateTime
  status          String
  comment         String?
  athleteId       Int
  Athlete         Athlete          @relation(fields: [athleteId], references: [id])
  Activity        Activity[]
  ReportIntervals ReportInterval[]
  ReportQuestions ReportQuestion[]
}

model ReportInterval {
  id               String         @id @default(uuid())
  intensityMin     Int
  intensityMax     Int
  intensityAvg     Int
  heartRateMin     Int
  heartRateMax     Int
  heartRateAvg     Int
  speedMin         Int
  speedMax         Int
  speedAvg         Int
  wattMin          Int
  wattMax          Int
  wattAvg          Int
  duration         Int
  intervalId       String
  Interval         Interval       @relation(fields: [intervalId], references: [id])
  activityReportId Int
  ActivityReport   ActivityReport @relation(fields: [activityReportId], references: [id])
}

model ReportQuestion {
  id               String         @id @default(uuid())
  answer           String
  questionId       String
  Question         Question       @relation(fields: [questionId], references: [id])
  activityReportId Int
  ActivityReport   ActivityReport @relation(fields: [activityReportId], references: [id])
}

model TrainingGoal {
  id        Int        @id @default(autoincrement())
  name      String
  date      DateTime
  goal      Int
  comment   String?
  athleteId Int
  Athlete   Athlete    @relation(fields: [athleteId], references: [id])
  Activity  Activity[]
}

model TrainingContest {
  id         Int        @id @default(autoincrement())
  name       String
  date       DateTime
  location   String
  goal       String
  sport      String
  priority   String
  comment    String?
  athleteId  Int
  Athlete    Athlete    @relation(fields: [athleteId], references: [id])
  activities Activity[]
}

model IntensityZone {
  id        Int    @id @default(autoincrement())
  type      String
  zone      Int
  intensity Int
  metaId    Int
  Meta      Meta   @relation(fields: [metaId], references: [id])

  @@unique([metaId, type, zone])
}

model Meta {
  id             Int             @id @default(autoincrement())
  heartrate      Int
  watt           Int
  speed          Int
  athlete        Athlete?
  intensityZones IntensityZone[]
}

model MetricOptions {
  id        String     @id @default(uuid())
  heartrate Boolean
  watt      Boolean
  speed     Boolean
  Activity  Activity[]
}

model Question {
  id             String           @id @default(uuid())
  question       String
  type           String
  activities     Activity[]
  ReportQuestion ReportQuestion[]
}

model Interval {
  id             String           @id @default(uuid())
  duration       Int
  zone           Int
  activityId     Int
  Activity       Activity         @relation(fields: [activityId], references: [id])
  ReportInterval ReportInterval[]
}
